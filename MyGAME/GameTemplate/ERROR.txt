-----------------------------------解決した。---------------------------------
spriteのバッファオーバーフロー 
〇配列の要素を0にすることで解決。　　				by Nishikiori

変数stackを具材一個一個が持っているため、キッチンにうまく詰めない。
→stackをプレイヤーにもたせるか。

キッチンに置いたら具材の種類がかわってしまう。
→プレイヤーのもつNo.は間違っていない。それをキッチン側で読み取ってNo.をそろえてNewGOする。
〇モデルの決定をStart関数でしていたのがダメだった。コンストラクタで行うことで解決。		by Nishikiori

画像（メニュー）の2枚目以降がでない。
→wWinMainのところでエラーが起こる。
〇SpriteRenderを作り、NewGOすることで解決。
〇1枚目でメモリをすべて使っていたためエラー。NewGO<>() = new ~~~~　でもできた。			by Nishikiori

GuzaiStackクラス実装。
具材をDeleteGOした時に変数を渡して、どれを積むか決める。
集まったらここでハンバーガーを作るか。

判別するための機構を作る
→まずは注文は3種類だけでいい。
→バグがあるが、ある程度の判別は可能に
→得点はキッチンのStackを使った方がいい
〇得点はStackの数をSCOREに送り、100をかけて文字を出した。
〇Judge()のfor文の回数を正しくし、回数はKitchen.cppから移してきたStack変数の数分行った。
→Kitchen.cppの方で早々に０で初期化していたため1回しか回っていなかった。

→1度注文を完成させて次、1段目（2段目）だけ正解でも送れる。今のままでは、目標の段数以下でもそれまでがあっていたら置けてしまう。
→一番下さえ合っていればカウンターを通った。
〇正解数を記録し、要素数と比較して等価だったらTRUEで返し、そうでなければFALSE

メニュー番号でfor文をまわすといいかも
Counter.cppの46行目から、メニューの数だけfor文を回して、中にスイッチ分を作りメニューの数分いちいち判別するか
→メニューの数分判別するとオーダーされていない注文に合致してしまう可能性があるためダメ。


-----------------------------------解決したい。---------------------------------









